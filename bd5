-- 
create database academy;
go
use academy;
go

-- 
create table faculties (
    id int identity primary key not null,
    name nvarchar(100) not null unique check(name <> '')
);

create table departments (
    id int identity primary key not null,
    building int not null check(building between 1 and 5),
    financing money not null check(financing >= 0) default 0,
    name nvarchar(100) not null unique check(name <> ''),
    facultyid int not null
);

create table teachers (
    id int identity primary key not null,
    name nvarchar(max) not null check(name <> ''),
    surname nvarchar(max) not null check(surname <> ''),
    salary money not null check(salary > 0),
    isprofessor bit default 0
);

create table curators (
    id int identity primary key not null,
    name nvarchar(max) not null check(name <> ''),
    surname nvarchar(max) not null check(surname <> '')
);

create table groups (
    id int identity primary key not null,
    name nvarchar(10) not null unique check(name <> ''),
    year int not null check(year between 1 and 5),
    departmentid int not null
);

create table students (
    id int identity primary key not null,
    name nvarchar(max) not null check(name <> ''),
    surname nvarchar(max) not null check(surname <> ''),
    rating float not null check(rating between 0 and 100)
);

create table subjects (
    id int identity primary key not null,
    name nvarchar(100) not null unique check(name <> '')
);

create table lectures (
    id int identity primary key not null,
    lectureroom nvarchar(max) not null check(lectureroom <> ''),
    subjectid int not null,
    teacherid int not null,
    date date default getdate()
);

create table groupscurators (
    id int identity primary key not null,
    curatorid int not null,
    groupid int not null
);

create table groupslectures (
    id int identity primary key not null,
    groupid int not null,
    lectureid int not null
);

create table groupsstudents (
    id int identity primary key not null,
    groupid int not null,
    studentid int not null
);

-- 
alter table departments add foreign key (facultyid) references faculties(id);
alter table groups add foreign key (departmentid) references departments(id);
alter table groupscurators add foreign key (curatorid) references curators(id);
alter table groupscurators add foreign key (groupid) references groups(id);
alter table groupslectures add foreign key (groupid) references groups(id);
alter table groupslectures add foreign key (lectureid) references lectures(id);
alter table lectures add foreign key (subjectid) references subjects(id);
alter table lectures add foreign key (teacherid) references teachers(id);
alter table groupsstudents add foreign key (groupid) references groups(id);
alter table groupsstudents add foreign key (studentid) references students(id);

-- 
insert into faculties (name) values ('computer science'), ('mathematics');

insert into departments (building, financing, name, facultyid) values
(1, 150000, 'software development', 1),
(2, 80000, 'applied math', 2),
(3, 50000, 'ai systems', 1);

insert into teachers (name, surname, salary, isprofessor) values
('ivan', 'petrov', 3000, 1),
('olga', 'ivanova', 1500, 0),
('serhiy', 'koval', 3500, 1);

insert into curators (name, surname) values
('anna', 'bila'), ('oleh', 'syn'), ('daria', 'sydorenko');

insert into groups (name, year, departmentid) values
('d221', 5, 1),
('d222', 5, 1),
('m101', 3, 2),
('a301', 4, 3),
('x101', 3, 2); 


insert into students (name, surname, rating) values
('maksym', 'horodnyy', 85),
('iryna', 'kovalenko', 90),
('petro', 'hnatenko', 70),
('olena', 'vasylenko', 60),
('roman', 'horbunov', 95),
('test', 'low', 50); 

insert into groupsstudents (groupid, studentid) values
(1, 1), (1, 2), (2, 3), (2, 4), (3, 5), (5, 6); 

insert into groupscurators (curatorid, groupid) values
(1, 1), (2, 1), (3, 2);

insert into subjects (name) values ('databases'), ('algorithms'), ('machine learning');

insert into lectures (lectureroom, subjectid, teacherid, date) values
('b101', 1, 1, '2025-01-01'),
('b102', 1, 1, '2025-01-02'),
('b103', 2, 2, '2025-01-03'),
('b104', 2, 2, '2025-01-04'),
('b105', 3, 3, '2025-01-05'),
('b106', 3, 3, '2025-01-06'),
('b107', 1, 1, '2025-01-07'),
('b108', 1, 1, '2025-01-08'),
('b109', 2, 2, '2025-01-02'),
('b110', 2, 2, '2025-01-03'),
('b111', 3, 3, '2025-01-04'),
('b112', 3, 3, '2025-01-05');

insert into groupslectures (groupid, lectureid) values
(1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(1,7),(1,8),(1,9),(1,10),(1,11),(1,12),
(2,5),(2,6),(3,1),(3,2),(5,12); 

-- 1. номера корпусов с суммой финансирования кафедр > 100000
select building
from departments
group by building
having sum(financing) > 100000;

-- 2. группы 5-го курса кафедры software development с >10 пар за первую неделю
select g.name
from groups g
join departments d on g.departmentid = d.id
join groupslectures gl on g.id = gl.groupid
join lectures l on gl.lectureid = l.id
where g.year = 5 and d.name = 'software development'
  and datepart(week, l.date) = 1
group by g.name
having count(l.id) > 10;

-- 3. группы с рейтингом выше d221
select g.name
from groups g
join groupsstudents gs on g.id = gs.groupid
join students s on gs.studentid = s.id
group by g.name
having avg(s.rating) > (
    select avg(s2.rating)
    from groups g2
    join groupsstudents gs2 on g2.id = gs2.groupid
    join students s2 on gs2.studentid = s2.id
    where g2.name = 'd221'
);

-- 4. преподаватели со ставкой выше средней у профессоров
select name, surname
from teachers
where salary > (
    select avg(salary)
    from teachers
    where isprofessor = 1
);

-- 5. группы с более чем одним куратором
select g.name
from groups g
join groupscurators gc on g.id = gc.groupid
group by g.name
having count(gc.curatorid) > 1;

-- 6. группы с рейтингом ниже минимального рейтинга групп 5 курса
select g.name
from groups g
join groupsstudents gs on g.id = gs.groupid
join students s on gs.studentid = s.id
group by g.name
having avg(s.rating) < (
    select min(avg_rating)
    from (
        select avg(s2.rating) as avg_rating
        from groups g2
        join groupsstudents gs2 on g2.id = gs2.groupid
        join students s2 on gs2.studentid = s2.id
        where g2.year = 5
        group by g2.id
    ) as sub
);

-- 7. факультеты с суммой финансирования кафедр > computer science
select f.name
from faculties f
join departments d on f.id = d.facultyid
group by f.id, f.name
having sum(d.financing) > (
    select sum(d2.financing)
    from faculties f2
    join departments d2 on f2.id = d2.facultyid
    where f2.name = 'computer science'
);

-- 8. дисциплины и преподаватели с наибольшим количеством лекций
select s.name as subjectname, t.name, t.surname
from lectures l
join subjects s on l.subjectid = s.id
join teachers t on l.teacherid = t.id
group by s.name, t.name, t.surname
having count(l.id) = (
    select max(cnt)
    from (
        select count(l2.id) as cnt
        from lectures l2
        group by l2.subjectid, l2.teacherid
    ) as sub
);

-- 9. дисциплина с наименьшим количеством лекций
select top 1 s.name
from lectures l
join subjects s on l.subjectid = s.id
group by s.name
order by count(l.id) asc;

-- 10. количество студентов и дисциплин на кафедре software development
select 
    count(distinct gs.studentid) as studentcount,
    count(distinct l.subjectid) as subjectcount
from groups g
join departments d on g.departmentid = d.id
join groupsstudents gs on g.id = gs.groupid
join groupslectures gl on g.id = gl.groupid
join lectures l on gl.lectureid = l.id
where d.name = 'software development';

-- 11. фамилии преподавателей и названия факультетов, где они читают
select distinct t.surname as teachersurname, f.name as facultyname
from teachers t
join lectures l on t.id = l.teacherid
join groupslectures gl on l.id = gl.lectureid
join groups g on g.id = gl.groupid
join departments d on d.id = g.departmentid
join faculties f on f.id = d.facultyid;
